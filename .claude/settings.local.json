{
  "includeCoAuthoredBy": false,
  "permissions": {
    "allow": [
      "mcp__zmcp-tools__orchestrate_objective",
      "Bash(sqlite3:*)",
      "mcp__zmcp-tools__terminate_agent",
      "Bash(find:*)",
      "Bash(read:*)",
      "Bash(grep:*)",
      "Bash(ls:*)",
      "Edit",
      "MultiEdit",
      "Read(*)",
      "Find(*)",
      "Write",
      "Glob",
      "Grep",
      "LS(*)",
      "List",
      "Search",
      "TodoRead",
      "TodoWrite",
      "WebFetch(*)",
      "WebSearch",
      "Task",
      "exit_plan_mode",
      "mcp__claude-mcp-tools__orchestrate_objective",
      "mcp__claude-mcp-tools__spawn_agent",
      "mcp__claude-mcp-tools__create_task",
      "mcp__claude-mcp-tools__join_room",
      "mcp__claude-mcp-tools__send_message",
      "mcp__claude-mcp-tools__wait_for_messages",
      "mcp__claude-mcp-tools__store_knowledge_memory",
      "mcp__claude-mcp-tools__search_knowledge_graph",
      "mcp__claude-mcp-tools__list_agents",
      "mcp__claude-mcp-tools__terminate_agent",
      "mcp__claude-mcp-tools__close_room",
      "mcp__claude-mcp-tools__delete_room",
      "mcp__claude-mcp-tools__list_rooms",
      "mcp__claude-mcp-tools__list_room_messages",
      "mcp__claude-mcp-tools__create_delayed_room",
      "mcp__claude-mcp-tools__analyze_coordination_patterns",
      "mcp__claude-mcp-tools__monitor_agents",
      "mcp__claude-mcp-tools__create_browser_session",
      "mcp__claude-mcp-tools__navigate_and_scrape",
      "mcp__claude-mcp-tools__interact_with_page",
      "mcp__claude-mcp-tools__manage_browser_sessions",
      "mcp__claude-mcp-tools__navigate_to_url",
      "mcp__claude-mcp-tools__scrape_content",
      "mcp__claude-mcp-tools__scrape_documentation",
      "mcp__claude-mcp-tools__get_scraping_status",
      "mcp__claude-mcp-tools__cancel_scrape_job",
      "mcp__claude-mcp-tools__force_unlock_job",
      "mcp__claude-mcp-tools__force_unlock_stuck_jobs",
      "mcp__claude-mcp-tools__list_documentation_sources",
      "mcp__claude-mcp-tools__delete_pages_by_pattern",
      "mcp__claude-mcp-tools__delete_pages_by_ids",
      "mcp__claude-mcp-tools__delete_all_website_pages",
      "mcp__claude-mcp-tools__analyze_project_structure",
      "mcp__claude-mcp-tools__generate_project_summary",
      "mcp__claude-mcp-tools__analyze_file_symbols",
      "mcp__claude-mcp-tools__list_files",
      "mcp__claude-mcp-tools__find_files",
      "mcp__claude-mcp-tools__easy_replace",
      "mcp__claude-mcp-tools__cleanup_orphaned_projects",
      "mcp__claude-mcp-tools__update_file_analysis",
      "mcp__claude-mcp-tools__remove_file_analysis",
      "mcp__claude-mcp-tools__update_project_metadata",
      "mcp__claude-mcp-tools__get_project_overview",
      "mcp__claude-mcp-tools__cleanup_stale_analyses",
      "mcp__claude-mcp-tools__create_execution_plan",
      "mcp__claude-mcp-tools__get_execution_plan",
      "mcp__claude-mcp-tools__execute_with_plan",
      "mcp__claude-mcp-tools__list_execution_plans",
      "mcp__claude-mcp-tools__delete_execution_plan",
      "mcp__claude-mcp-tools__update_execution_plan",
      "Bash(echo:*)",
      "Bash(git fetch:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(git commit:*)"
    ],
    "deny": []
  },
  "hooks": {
    "Notification": [
      {
        "matcher": "*",
        "hooks": [
          {
            "type": "command",
            "command": "./.claude/hooks/context-injection.sh"
          }
        ]
      }
    ]
  }
}